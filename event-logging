<div class="stackedit__html"><h1 id="event-logging-for-tracking-user-behavior">Event Logging for tracking user behavior</h1>
<h3 id="scenario">Scenario</h3>
<p>Which pages on your website are more popular than the others? How much time do users spend on various pages? What is the general navigation pattern?</p>
<p>Answers to these questions provide you useful (and many times surprising) insight on user behavior. This also helps you fine tune content and feature development based on the preferences of your user base.</p>
<p>Let us design a robust event logging service for this  requirement.</p>
<h3 id="solution">Solution</h3>
<p>Setting up event logging on your website has a detailed execution. In this discussion we will limit to higher level details only. Let us start designing with answering these questions :</p>
<ol>
<li>what events to log?</li>
<li>what data to log while logging an event?</li>
</ol>
<h4 id="what-events-to-log">What events to log?</h4>
<p>Firstly, you would like to log an event when somebody visits your website. Let us call this a ‘Page View’ event.</p>
<p>Next the user will navigate to various pages in your website. In order to capture this introduce a ‘Page view’ event on all pages. (If your website is a single page application then trigger a page view event on every url change).</p>
<p>Next the user might click on buttons like view drop down, expand menu etc. These clicks do not result in a url change, but are still worth capturing. Introduce a ‘User Action’ event for these.</p>
<p>Lastly, at some point the user will close your website. Let us trigger a ‘Exit’ event here.</p>
<h4 id="what-data-to-log">What data to log?</h4>
<p>Here as a sample data object that you can log for all events</p>
<pre class=" language-js"><code class="prism  language-js"><span class="token punctuation">{</span>
	<span class="token comment">/* Client Platform details */</span>
	resolutionWidth<span class="token punctuation">:</span> window<span class="token punctuation">.</span>screen<span class="token punctuation">.</span>width<span class="token punctuation">,</span>
	resolutionHeight<span class="token punctuation">:</span> window<span class="token punctuation">.</span>screen<span class="token punctuation">.</span>height<span class="token punctuation">,</span>
	clientWidth<span class="token punctuation">:</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>clientWidth<span class="token punctuation">,</span>
	clientHeight<span class="token punctuation">:</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>clientHeight<span class="token punctuation">,</span>
	platform<span class="token punctuation">:</span> navigator<span class="token punctuation">.</span>platform
	
	<span class="token comment">/* Place and Time */</span>
	timeZone<span class="token punctuation">:</span> d<span class="token punctuation">.</span><span class="token function">getTimezoneOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	timeStamp<span class="token punctuation">:</span> d<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	
	<span class="token comment">/* Event Description */</span>
	eventType<span class="token punctuation">:</span>
<span class="token punctuation">}</span>
</code></pre>
<p>For ‘Page View’ and ‘Exit’ events you can include:</p>
<pre class=" language-js"><code class="prism  language-js"><span class="token punctuation">{</span>
	newPageUrl<span class="token punctuation">:</span><span class="token punctuation">,</span>
	previousPageUrl<span class="token punctuation">:</span><span class="token punctuation">,</span>
	timeSpentOnPreviousPage<span class="token punctuation">:</span><span class="token punctuation">,</span> 
	timeSpentOnSiteTillNow<span class="token punctuation">:</span>  
<span class="token punctuation">}</span>
</code></pre>
<p>For ‘User Action’ events you can include:</p>
<pre class=" language-js"><code class="prism  language-js"><span class="token punctuation">{</span>
	pageUrl<span class="token punctuation">:</span>
	uiElementId<span class="token punctuation">:</span>
	timeSpentOnPageTillNow<span class="token punctuation">:</span><span class="token punctuation">,</span> 
	timeSpentOnSiteTillNow<span class="token punctuation">:</span> 
<span class="token punctuation">}</span>
</code></pre>
<p>The above object property names are kept long to make them self explanatory. You can shorted them to reduce payload size (while transmitting them to server).</p>
<h3 id="event-database-and-microservice">Event Database and Microservice</h3>
<p>The second part of the solution is to push information sent by clients into persistent storage on the server. Let us tackle this part in the following steps:</p>
<ol>
<li>Create an events Database (on MongoDB)</li>
<li>Run an ‘event’ service (in nodeJS) to write events data to Database.</li>
</ol>
<h4 id="create-an-events-database">Create an Events Database</h4>
<p>At this point, if you are not familiar with mongoDB,  you can refer to <a href="https://terminalnotes.com/mongo-intro">https://terminalnotes.com/mongo-intro</a> for setup and a brief introduction. The remaining part of the discussion assumes familiarity with mongoDB and writing microservices.</p>
<p>Create a Database called eventsDB in mongoDB. You can use this database for storing events received from all websites you own.</p>
<p>Next, in eventsDB create a collection called <em>{your-website-name}-events</em></p>
<p>This completes the database setup</p>
<h4 id="write-events-data-to-database">Write Events data to Database</h4>
<p>Write a microservice to recieve data from client and post it to eventsDB database. (A simplified implementation for this is discussed in <a href="https://terminalnotes.com/mongo-intro">https://terminalnotes.com/mongo-intro</a>)</p>
<p>A few things worth discussing here are:</p>
<h4 id="include-client-ip-address-in-events-data">1. Include client IP address in events data</h4>
<p>IP address lets you derive information about the cilent’s geo location and network service provider. If your website does not ask users to Sign Up, an IP address also servers as a makeshift user id.</p>
<pre class=" language-js"><code class="prism  language-js"><span class="token keyword">const</span>  ip  <span class="token operator">=</span>  req<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'x-forwarded-for'</span><span class="token punctuation">]</span> <span class="token operator">||</span>  req<span class="token punctuation">.</span>connection<span class="token punctuation">.</span>remoteAddress<span class="token punctuation">;</span>
</code></pre>
<p>It is possible for a client to hide or mask an IP address, that is why an IP address and its associated information cannot be considered accurate on all occasions.</p>
<h4 id="reduce-byte-size-of-events-document">2. Reduce byte size of events document</h4>
<p>Since we will be storing millions of event documents, it is important to optimize on space. It is possible to reduce the size of a document by 60-70% by the following simple techniques:</p>
<ol>
<li>Reduce the length of key strings in document object. Ideally use 1 or two letter codes. For example you can replace the key string “timeZone” with “tz”.</li>
<li>Reduce the length of key values. For this you replace values like “Page_view”, “desktop”, “Windows” etc with their initials.</li>
<li>Wherever possible Use Number, varchar, boolean instead of string in document schema. This also contributes in reducing space.</li>
</ol>
<h4 id="make-the-microservice-secure">3. Make the microservice secure</h4>
<p>Since this microservice involves a post call that writes to a database, it is important to ascertain that only your website(s) can access it. You can do the following to make things more secure:</p>
<ol>
<li>Put the microservice behind an API gateway. You can do this by adding a reverse proxy for the api url. In other words, the port where the events microservice is running is not accessible directly from external network. It can only be accessed by sending a request on client facing ports (like 80 and 443) of your server.</li>
<li>Run the api gateway on https, and making sure Cross-Origin Resource Sharing (CORS) is disabled on it</li>
</ol>
</div>

