<div class="stackedit__html"><h1 id="writing-a-client-side-module-for-running-websockets">Writing a client-side module for running WebSockets</h1>
<blockquote>
<p>WebSocket in a popular ‘push-pull’ framework that allows setting up peer-to-peer communication between client and server.</p>
<p>WebSocket has applications in chat, notification and data sync systems design. All modern browsers have built in support for it.</p>
</blockquote>
<p>Let us discuss designing a client side framework for running Websocket.</p>
<h3 id="encapsulation">Encapsulation</h3>
<p>Create a module with exclusive namespace for WebSocket data and functions.</p>
<p>You can do so by wrapping the standard WebSocket class (inbuilt in all browsers) with a custom MyWebSocket class.</p>
<pre class=" language-js"><code class="prism  language-js"><span class="token keyword">const</span> <span class="token keyword">class</span> <span class="token class-name">MyWebSocket</span> <span class="token punctuation">{</span>
<span class="token comment">/* Create a websocket connection in cosntructor */</span>
    <span class="token function">constructor</span> <span class="token punctuation">(</span>url<span class="token operator">=</span><span class="token string">"wss://yourDefaultUrl"</span><span class="token punctuation">,</span>
                 onMessageCallback<span class="token punctuation">,</span>
                 protocols<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span> 
                <span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">this</span><span class="token punctuation">.</span>socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> protocols<span class="token punctuation">)</span>
	<span class="token function">setUpMessageReceiver</span><span class="token punctuation">(</span>onMessageCallback<span class="token punctuation">)</span> 
    <span class="token punctuation">}</span>

    <span class="token function">sendData</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> dataPacket <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">packageData</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>		
	<span class="token keyword">this</span><span class="token punctuation">.</span>socket<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>dataPacket<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token function">setUpMessageReceiver</span><span class="token punctuation">(</span>onMessageCallback<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	    <span class="token keyword">this</span><span class="token punctuation">.</span>socket<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span>  <span class="token operator">=</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	    <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">unpackageData</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>data<span class="token punctuation">)</span>
            <span class="token function">onMessageCallback</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token function">packageData</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	    <span class="token comment">/* create a data packet containing the message*/</span>
    <span class="token punctuation">}</span>
    
    <span class="token function">unpackageData</span><span class="token punctuation">(</span>dataPacket<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	    <span class="token comment">/* extract useful data from data packet */</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>The wrapper class allows you to add custom code around base class methods. The functions <em>packageData</em> and <em>unpackageData</em> in the above snippet are such examples.</p>
<p>This way you can also add useful features like validation, error handling etc to your module. Let us discuss some of them in detail:</p>
<h3 id="validation">Validation</h3>
<p>Before connecting to a WebSocket endpoint, check whether the url refers to a valid server location that you recognize.</p>
<pre class=" language-js"><code class="prism  language-js"><span class="token keyword">const</span> SUPPORTED_ENDPOINTS<span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'/websocket'</span><span class="token punctuation">]</span>
<span class="token keyword">const</span> SUPPORTED_PROTOCOLS <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"wss:"</span><span class="token punctuation">,</span><span class="token string">"ws:"</span><span class="token punctuation">]</span>
<span class="token keyword">const</span> SUPPORTED_SERVERS <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"www.example.com"</span><span class="token punctuation">,</span><span class="token string">"webscoket.example.com"</span><span class="token punctuation">]</span>

<span class="token keyword">function</span> <span class="token function">validateUrl</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span>pathname<span class="token punctuation">,</span> hostname<span class="token punctuation">,</span> protocol<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>
	<span class="token keyword">return</span> SUPPORTED_SERVERS<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span>sHost <span class="token operator">=&gt;</span> hostname <span class="token operator">==</span> sHost<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> 
           SUPPORTED_ENDPOINTS<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span>sPath <span class="token operator">=&gt;</span> pathname <span class="token operator">==</span> sPath<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
           SUPPORTED_PROTOCOLS<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span>sProtocol <span class="token operator">=&gt;</span> protocol <span class="token operator">==</span> sProtocol<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre>
<p>The above code snippet checks for host, path and protocol.</p>
<h3 id="data-packaging">Data Packaging</h3>
<p>Decide on a data format (preferably a JSON) which you will use to communicate with the WebSocket server.</p>
<pre class=" language-js"><code class="prism  language-js"><span class="token keyword">const</span> dataPacket <span class="token operator">=</span> <span class="token punctuation">{</span>
    message<span class="token punctuation">,</span>
    use<span class="token punctuation">,</span>
    metadata<span class="token punctuation">,</span> 
    timestamp
<span class="token punctuation">}</span> 
</code></pre>
<p>Since <em>WebSocket</em> APIs only allow sending and receiving strings, use <code>JSON.stringify</code> and <code>JSON.parse</code> functions to interconvert between JSON and string data formats.</p>
<h3 id="error-handling">Error Handling</h3>
<p>Place error catchers at all potential points of failure. You can write your own custom function for graceful error handling, which may additionally include fallbacks, error logging etc.</p>
<pre class=" language-js"><code class="prism  language-js"><span class="token comment">/* Error Catchers */</span>
<span class="token function">addErrorListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>socket<span class="token punctuation">.</span><span class="token function-variable function">onerror</span>  <span class="token operator">=</span>  <span class="token keyword">function</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	    <span class="token function">throwError</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`Error while connecting to URL`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* Error Handling functions */</span>

<span class="token keyword">function</span> <span class="token function">throwError</span> <span class="token punctuation">(</span>errorData<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>errorData<span class="token punctuation">.</span>message<span class="token punctuation">)</span>
    <span class="token function">fallbacks</span><span class="token punctuation">(</span>errorData<span class="token punctuation">)</span>
    <span class="token function">logErrorEvent</span><span class="token punctuation">(</span>errorData<span class="token punctuation">)</span> 
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">fallbacks</span> <span class="token punctuation">(</span>errorData<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> type <span class="token punctuation">}</span> <span class="token operator">=</span> errorData
    <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">==</span> <span class="token string">"connectionRefused"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">/* try reconnecting with another server */</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">==</span> <span class="token string">"connectionFailed"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">/* Try reconnecting or switch to long polling*/</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">/* and so on */</span>
<span class="token punctuation">}</span>
</code></pre>
</div>

