<div class="stackedit__html"><h1 id="continuous-deployment-to-server-on-every-code-push">Continuous deployment to server on every code push</h1>
<h3 id="scenario">Scenario</h3>
<p>The case for setting continuous integration exists if you face any of the following issues:</p>
<ul>
<li>There are one or more manual steps involved in deploying latest code on server</li>
<li>There is a website downtime while building code on server</li>
<li>In case the server build fails, the website goes down</li>
</ul>
<h3 id="solution">Solution</h3>
<p>The solution we discuss here is in (single developer)-&gt;(single server) context. The key parts of the solution are:</p>
<ol>
<li>Write a script to pull, build and deploy latest code on server</li>
<li>Write another script to connect from your local machine to server and run script (1)</li>
<li>Create a git alias to push code to master and then run script (2)</li>
</ol>
<h4 id="script-to-pull-build-and-deploy-latest-code-on-server">Script to pull, build and deploy latest code on server</h4>
<p>Create a file <code>launch.sh</code> in your project folder and copy paste the following code in it</p>
<pre><code>	# Browse to project folder on server and pull code 
cd ~/path/to/project
git reset --hard
git pull origin

	# Build Steps (These may be different for your case)
npm install
set -e		
	# immediately exit script in case of an error in build step 
npm run build
echo Build Successful

	# Copy to build-stable folder in case the build is successful
cp -R build build-stable 
	# Use build-stable instead of build folder to serve files
</code></pre>
<p>Save the file and grant execute permissions by running</p>
<pre><code>chmod +x launch.sh
</code></pre>
<p>push these changes to master</p>
<h4 id="script-to-run-launch.sh-on-server">Script to run <code>launch.sh</code> on server</h4>
<p>Create a file <code>.git/push-deploy.sh</code> in your local repository and copy paste the following code in it</p>
<pre><code>echo ...Pushing to git
git push origin master:master
echo ...Deploying on AWS
ssh -i ~/.ssh/awsKey.pem ubuntu@host-public-ip './project/launch.sh'
</code></pre>
<p>make sure to add the correct awsKey name, host-public-ip and <a href="http://launch.sh">launch.sh</a> file location in the above code snippet.</p>
<p>Save the file and grant execute permissions by running</p>
<pre><code>chmod +x push-deploy.sh
</code></pre>
<h4 id="git-alias-to-push-and-deploy-code">Git alias to push and deploy code</h4>
<p>Open .git/config file and add the following line of code in [alias] section. If the section does not exist then create it.</p>
<pre><code>[alias]
	deploy = "! /absolute/path/to/project/.git/push-deploy.sh"
</code></pre>
<h4 id="test-the-entire-setup">Test the entire setup</h4>
<p>Start by making sure that your <code>launch.sh</code> is able to successfully pull and deploy code on server. For this open your server console, browse to your project folder, pull/clone the latest code and execute <code>./launch.sh</code></p>
<p>If this test is successful then open your local project folder. Make a test commit and execute <code>git deploy</code></p>
<p>Once the script run completes. Open your website on browser, and confirm that the changes made in the test commit are present.</p>
</div>

